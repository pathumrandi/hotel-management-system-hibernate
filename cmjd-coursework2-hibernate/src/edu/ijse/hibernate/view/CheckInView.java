/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.ijse.hibernate.view;

import edu.ijse.hibernate.controller.CheckInController;
import edu.ijse.hibernate.controller.CustomerController;
import edu.ijse.hibernate.controller.RoomController;
import edu.ijse.hibernate.dto.CheckInDetailDto;
import edu.ijse.hibernate.dto.CheckInDto;
import edu.ijse.hibernate.dto.CustomerDto;
import edu.ijse.hibernate.dto.RoomDto;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pathum
 */
public class CheckInView extends javax.swing.JFrame {

    private final CustomerController CUSTOMER_CONTROLLER;
    private RoomController roomController;
    private List<CheckInDetailDto> dtos;
    CheckInController checkInController;
    private Integer amountval=0;

    /**
     * Creates new form CheckInView
     */
    public CheckInView() {
        CUSTOMER_CONTROLLER = new CustomerController();
        roomController = new RoomController();
        dtos = new ArrayList<>();
        checkInController = new CheckInController();
        initComponents();
        loadCustomers();
        loadRoomTable();
        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblCheckIn = new javax.swing.JLabel();
        lblCustId = new javax.swing.JLabel();
        txtCustId = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtNic = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCustomer = new javax.swing.JTable();
        lblRoomNumber = new javax.swing.JLabel();
        txtRoomNumber = new javax.swing.JTextField();
        lblPrice = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblRoom = new javax.swing.JTable();
        btnReserveRoom = new javax.swing.JButton();
        btnPlace = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblReservation = new javax.swing.JTable();
        lbldate1 = new javax.swing.JLabel();
        lblDate2 = new javax.swing.JLabel();
        txtPackage = new javax.swing.JComboBox<>();
        lblAmount = new javax.swing.JLabel();
        lblAmountVal = new javax.swing.JLabel();
        dateCheckIn = new com.toedter.calendar.JDateChooser();
        dateCheckOut = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocation(new java.awt.Point(50, 118));

        lblCheckIn.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        lblCheckIn.setText("Check In");

        lblCustId.setText("Customer ID");

        jLabel1.setText("NIC");

        tblCustomer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblCustomer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCustomerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCustomer);

        lblRoomNumber.setText("Room Number");

        lblPrice.setText("Price");

        tblRoom.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblRoom.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRoomMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblRoom);

        btnReserveRoom.setText("Reserve Room");
        btnReserveRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReserveRoomActionPerformed(evt);
            }
        });

        btnPlace.setText("Place Reservation");
        btnPlace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlaceActionPerformed(evt);
            }
        });

        tblReservation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tblReservation);

        lbldate1.setText("Check In Date");

        lblDate2.setText("Check Out Date");

        txtPackage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Full Board", "Half Board", "Bed and Breakfast" }));

        lblAmount.setText("Amount");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 994, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblCustId, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtCustId, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                            .addComponent(txtNic)))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(98, 98, 98)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(lblRoomNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(lblPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtRoomNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                            .addComponent(txtPrice))
                                        .addGap(103, 103, 103)
                                        .addComponent(txtPackage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnPlace)
                                            .addComponent(btnReserveRoom, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(96, 96, 96)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblAmountVal, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(lblAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(68, 68, 68)
                                                .addComponent(lblDate2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(68, 68, 68)
                                                .addComponent(dateCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 1051, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbldate1)
                            .addComponent(dateCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCheckIn)
                    .addComponent(lbldate1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dateCheckIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCustId)
                    .addComponent(txtCustId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRoomNumber)
                    .addComponent(txtRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDate2)
                    .addComponent(txtPackage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtNic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPrice)
                        .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dateCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblAmount)
                        .addGap(18, 18, 18)
                        .addComponent(lblAmountVal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReserveRoom)
                        .addGap(18, 18, 18)
                        .addComponent(btnPlace)))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblCustomerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCustomerMouseClicked
        // TODO add your handling code here:
        searchCustomer();
    }//GEN-LAST:event_tblCustomerMouseClicked

    private void tblRoomMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRoomMouseClicked
        // TODO add your handling code here:
        searchRoom();
    }//GEN-LAST:event_tblRoomMouseClicked

    private void btnReserveRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReserveRoomActionPerformed
        // TODO add your handling code here:
        addToTable();
    }//GEN-LAST:event_btnReserveRoomActionPerformed

    private void btnPlaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlaceActionPerformed
        // TODO add your handling code here:
        placeReservation();
    }//GEN-LAST:event_btnPlaceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CheckInView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CheckInView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CheckInView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CheckInView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CheckInView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPlace;
    private javax.swing.JButton btnReserveRoom;
    private com.toedter.calendar.JDateChooser dateCheckIn;
    private com.toedter.calendar.JDateChooser dateCheckOut;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblAmount;
    private javax.swing.JLabel lblAmountVal;
    private javax.swing.JLabel lblCheckIn;
    private javax.swing.JLabel lblCustId;
    private javax.swing.JLabel lblDate2;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblRoomNumber;
    private javax.swing.JLabel lbldate1;
    private javax.swing.JTable tblCustomer;
    private javax.swing.JTable tblReservation;
    private javax.swing.JTable tblRoom;
    private javax.swing.JTextField txtCustId;
    private javax.swing.JTextField txtNic;
    private javax.swing.JComboBox<String> txtPackage;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtRoomNumber;
    // End of variables declaration//GEN-END:variables

    private void loadCustomers() {
        try {
            String[] columns = {"ID", "Gender", "NIC"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };
            tblCustomer.setModel(dtm);
            List<CustomerDto> customerDtos = CUSTOMER_CONTROLLER.getAll();
            for (CustomerDto e : customerDtos) {
                Object[] rawData = {e.getCustId(), e.getGender(), e.getNic()};
                dtm.addRow(rawData);
            }
        } catch (Exception ex) {
            Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadRoomTable() {
        try {
            String[] columns = {"Room Number", "Price", "Status"};
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }

            };
            tblRoom.setModel(dtm);
            List<RoomDto> dtos = roomController.getAll();
            for (RoomDto dto : dtos) {
                Object[] rawData = {dto.getRoomNumber(), /*dto.getCategory().getCategoryName(),dto.getCategory().getBedCount(),*/ dto.getPrice(), dto.getStatus()};
                dtm.addRow(rawData);
            }
        } catch (Exception ex) {
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void searchCustomer() {
        try {
            String custId = tblCustomer.getValueAt(tblCustomer.getSelectedRow(), 0).toString();
            CustomerDto dto = CUSTOMER_CONTROLLER.getCustomer(Integer.parseInt(custId));
            if (dto == null) {
                JOptionPane.showMessageDialog(this, "Customer Not Found");
            } else {
                txtCustId.setText(dto.getCustId().toString());
                txtNic.setText(dto.getNic());
            }
        } catch (Exception ex) {
            Logger.getLogger(CustomerView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error at loading Customer Data");
        }
    }

    private void searchRoom() {
        try {
            String roomNumber = tblRoom.getValueAt(tblRoom.getSelectedRow(), 0).toString();
            RoomDto dto = roomController.getRoom(Integer.parseInt(roomNumber));
            if (dto == null) {
                JOptionPane.showMessageDialog(this, "Customer Not Found");
            } else {
                txtRoomNumber.setText(dto.getRoomNumber().toString());
                txtPrice.setText(dto.getPrice().toString());
            }
        } catch (Exception ex) {
            Logger.getLogger(RoomView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error at loading Room Data");
        }
    }

    private void clearCustomer() {
        txtCustId.setText("");
        txtNic.setText("");
    }

    private void clearRoom() {
        txtRoomNumber.setText("");
        txtPrice.setText("");
    }

    private void addToTable() {
        CheckInDetailDto dto = new CheckInDetailDto();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        dto.setNic(txtNic.getText());
        dto.setRoomNumber(Integer.parseInt(txtRoomNumber.getText()));
        //dto.setCheckInDate(txtDate1.getText());
        dto.setCheckInDate(sdf.format(dateCheckIn.getDate()));
        //dto.setCheckOutDate(txtDate2.getText());
        dto.setCheckOutDate(sdf.format(dateCheckOut.getDate()));
        dto.setPackageName(txtPackage.getSelectedItem().toString());
        dto.setPrice(Integer.parseInt(txtPrice.getText()));

        dtos.add(dto);

        int price = 0;
        if(dto.getPackageName().equals("Full Board")){
            price=2000;
        }else if(dto.getPackageName().equals("Half Board")){
            price=1000;
        }else{
            price=500;
        }
        
        Object[] rowData = {dto.getNic(), dto.getRoomNumber(),dto.getPackageName(),dto.getCheckInDate(),dto.getCheckOutDate(),dto.getPrice()+price};
        DefaultTableModel dtm = (DefaultTableModel) tblReservation.getModel();
        dtm.addRow(rowData);
        clearRoom();
        amountval=amountval+dto.getPrice()+price;
        lblAmountVal.setText(amountval.toString()+"/=");
    }

    private void loadTable() {
        String columns[] = {"NIC", "Room Number","Package","Check In Date", "Check Out Date","Price"};
        DefaultTableModel dtm = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }

        };
        tblReservation.setModel(dtm);
    }

    private void placeReservation() {
        try {
            CheckInDto dto = new CheckInDto();
            dto.setReservationId(Integer.parseInt(txtCustId.getText()));
            dto.setCustId(Integer.parseInt(txtCustId.getText()));
            
//            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
//            String date = sdf.format(new Date());

            LocalDateTime currentDateTime = LocalDateTime.now();
            String date = currentDateTime.toString();
            dto.setDate(date);
            dto.setDtos(dtos);
            
            String resp = checkInController.placeReservation(dto);
            JOptionPane.showMessageDialog(this, resp);
            loadRoomTable();
            clearCustomer();
            loadTable();
        } catch (Exception ex) {
            Logger.getLogger(CheckInView.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex);
        }
    }

}
